{"ast":null,"code":"import { ClientMessageType, ServerMessageType } from \"./Enums\";\nexport default class WSConnector {\n  constructor() {\n    this.connection = void 0;\n    this.connect = () => {\n      this.connection = new WebSocket('ws://localhost:8080/ws/');\n      this.connection.onclose = () => {\n        this.connection = undefined;\n      };\n      this.connection.onerror = () => {};\n      this.connection.onopen = () => {};\n      this.connection.onmessage = event => {\n        const message = JSON.parse(event.data);\n        switch (message.messageType) {\n          case ServerMessageType.success:\n            break;\n          case ServerMessageType.error:\n            break;\n          case ServerMessageType.executionReport:\n            break;\n          case ServerMessageType.marketDataUpdate:\n            break;\n        }\n      };\n    };\n    this.disconnect = () => {\n      var _this$connection;\n      (_this$connection = this.connection) === null || _this$connection === void 0 ? void 0 : _this$connection.close();\n    };\n    this.send = message => {\n      var _this$connection2;\n      (_this$connection2 = this.connection) === null || _this$connection2 === void 0 ? void 0 : _this$connection2.send(JSON.stringify(message));\n    };\n    this.subscribeMarketData = instrument => {\n      this.send({\n        messageType: ClientMessageType.subscribeMarketData,\n        message: {\n          instrument\n        }\n      });\n    };\n    this.unsubscribeMarketData = subscriptionId => {\n      this.send({\n        messageType: ClientMessageType.unsubscribeMarketData,\n        message: {\n          subscriptionId\n        }\n      });\n    };\n    this.placeOrder = (instrument, side, amount, price) => {\n      this.send({\n        messageType: ClientMessageType.placeOrder,\n        message: {\n          instrument,\n          side,\n          amount,\n          price\n        }\n      });\n    };\n    this.connection = undefined;\n  }\n}","map":{"version":3,"names":["ClientMessageType","ServerMessageType","WSConnector","constructor","connection","connect","WebSocket","onclose","undefined","onerror","onopen","onmessage","event","message","JSON","parse","data","messageType","success","error","executionReport","marketDataUpdate","disconnect","close","send","stringify","subscribeMarketData","instrument","unsubscribeMarketData","subscriptionId","placeOrder","side","amount","price"],"sources":["/Users/heiwa.local/Desktop/Projects/test-task/test-task-ntprogress/client/src/WSClient.ts"],"sourcesContent":["import {ClientMessage} from \"./Models/ClientMessages\";\nimport {ClientMessageType, Instrument, OrderSide, ServerMessageType} from \"./Enums\";\nimport Decimal from \"decimal.js\";\nimport {ServerEnvelope} from \"./Models/ServerMessages\";\n\nexport default class WSConnector {\n  connection: WebSocket | undefined;\n\n  constructor() {\n    this.connection = undefined;\n  }\n\n  connect = () => {\n    this.connection = new WebSocket('ws://localhost:8080/ws/');\n    this.connection.onclose = () => {\n      this.connection = undefined;\n    };\n\n    this.connection.onerror = () => {\n\n    };\n\n    this.connection.onopen = () => {\n\n    };\n\n    this.connection.onmessage = (event) => {\n      const message: ServerEnvelope = JSON.parse(event.data);\n      switch (message.messageType) {\n        case ServerMessageType.success:\n\n          break;\n        case ServerMessageType.error:\n\n          break;\n        case ServerMessageType.executionReport:\n\n          break;\n        case ServerMessageType.marketDataUpdate:\n\n          break;\n      }\n    };\n  }\n\n  disconnect = () => {\n    this.connection?.close();\n  }\n\n  send = (message: ClientMessage) => {\n    this.connection?.send(JSON.stringify(message));\n  }\n\n  subscribeMarketData = (instrument: Instrument) => {\n    this.send({\n      messageType: ClientMessageType.subscribeMarketData,\n      message: {\n        instrument,\n      }\n    });\n  }\n\n  unsubscribeMarketData = (subscriptionId: string) => {\n    this.send({\n      messageType: ClientMessageType.unsubscribeMarketData,\n      message: {\n        subscriptionId,\n      }\n    });\n  }\n\n  placeOrder = (instrument: Instrument, side: OrderSide, amount: Decimal, price: Decimal) => {\n    this.send({\n      messageType: ClientMessageType.placeOrder,\n      message: {\n        instrument,\n        side,\n        amount,\n        price,\n      }\n    });\n  }\n}\n"],"mappings":"AACA,SAAQA,iBAAiB,EAAyBC,iBAAiB,QAAO,SAAS;AAInF,eAAe,MAAMC,WAAW,CAAC;EAG/BC,WAAW,GAAG;IAAA,KAFdC,UAAU;IAAA,KAMVC,OAAO,GAAG,MAAM;MACd,IAAI,CAACD,UAAU,GAAG,IAAIE,SAAS,CAAC,yBAAyB,CAAC;MAC1D,IAAI,CAACF,UAAU,CAACG,OAAO,GAAG,MAAM;QAC9B,IAAI,CAACH,UAAU,GAAGI,SAAS;MAC7B,CAAC;MAED,IAAI,CAACJ,UAAU,CAACK,OAAO,GAAG,MAAM,CAEhC,CAAC;MAED,IAAI,CAACL,UAAU,CAACM,MAAM,GAAG,MAAM,CAE/B,CAAC;MAED,IAAI,CAACN,UAAU,CAACO,SAAS,GAAIC,KAAK,IAAK;QACrC,MAAMC,OAAuB,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtD,QAAQH,OAAO,CAACI,WAAW;UACzB,KAAKhB,iBAAiB,CAACiB,OAAO;YAE5B;UACF,KAAKjB,iBAAiB,CAACkB,KAAK;YAE1B;UACF,KAAKlB,iBAAiB,CAACmB,eAAe;YAEpC;UACF,KAAKnB,iBAAiB,CAACoB,gBAAgB;YAErC;QAAM;MAEZ,CAAC;IACH,CAAC;IAAA,KAEDC,UAAU,GAAG,MAAM;MAAA;MACjB,wBAAI,CAAClB,UAAU,qDAAf,iBAAiBmB,KAAK,EAAE;IAC1B,CAAC;IAAA,KAEDC,IAAI,GAAIX,OAAsB,IAAK;MAAA;MACjC,yBAAI,CAACT,UAAU,sDAAf,kBAAiBoB,IAAI,CAACV,IAAI,CAACW,SAAS,CAACZ,OAAO,CAAC,CAAC;IAChD,CAAC;IAAA,KAEDa,mBAAmB,GAAIC,UAAsB,IAAK;MAChD,IAAI,CAACH,IAAI,CAAC;QACRP,WAAW,EAAEjB,iBAAiB,CAAC0B,mBAAmB;QAClDb,OAAO,EAAE;UACPc;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDC,qBAAqB,GAAIC,cAAsB,IAAK;MAClD,IAAI,CAACL,IAAI,CAAC;QACRP,WAAW,EAAEjB,iBAAiB,CAAC4B,qBAAqB;QACpDf,OAAO,EAAE;UACPgB;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDC,UAAU,GAAG,CAACH,UAAsB,EAAEI,IAAe,EAAEC,MAAe,EAAEC,KAAc,KAAK;MACzF,IAAI,CAACT,IAAI,CAAC;QACRP,WAAW,EAAEjB,iBAAiB,CAAC8B,UAAU;QACzCjB,OAAO,EAAE;UACPc,UAAU;UACVI,IAAI;UACJC,MAAM;UACNC;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAxEC,IAAI,CAAC7B,UAAU,GAAGI,SAAS;EAC7B;AAwEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}