{"ast":null,"code":"var camelcase = require(\"camelcase\");\nvar mapObj = require(\"map-obj\");\nmodule.exports = function camelcaseKeysDeep(obj) {\n  // Any falsy, which includes `null` whose typeof is `object`.\n  if (!obj) {\n    return obj;\n  }\n  // Date, whose typeof is `object` too.\n  if (obj instanceof Date) {\n    return obj;\n  }\n  // Array, whose typeof is `object` too.\n  if (Array.isArray(obj)) {\n    return obj.map(function (element) {\n      return camelcaseKeysDeep(element);\n    });\n  }\n  // So, if this is still an `object`, we might be interested in it.\n  if (typeof obj === \"object\") {\n    return mapObj(obj, function (key, value) {\n      var newKey = camelcase(key);\n      if (key !== newKey && newKey in obj) {\n        throw new Error(\"Camelcased key `\" + newKey + \"` would overwrite existing key of the given JSON object\");\n      }\n      return [newKey, camelcaseKeysDeep(value)];\n    });\n  }\n  // Something else like a String or Number.\n  return obj;\n};","map":{"version":3,"names":["camelcase","require","mapObj","module","exports","camelcaseKeysDeep","obj","Date","Array","isArray","map","element","key","value","newKey","Error"],"sources":["/Users/heiwa.local/Desktop/Projects/test-task/test-task-ntprogress/client/node_modules/camelcase-keys-deep/index.js"],"sourcesContent":["var camelcase = require(\"camelcase\");\nvar mapObj = require(\"map-obj\");\n\nmodule.exports = function camelcaseKeysDeep(obj) {\n  // Any falsy, which includes `null` whose typeof is `object`.\n  if (!obj) {\n    return obj;\n  }\n  // Date, whose typeof is `object` too.\n  if (obj instanceof Date) {\n    return obj;\n  }\n  // Array, whose typeof is `object` too.\n  if (Array.isArray(obj)) {\n    return obj.map(function(element) {\n      return camelcaseKeysDeep(element);\n    });\n  }\n  // So, if this is still an `object`, we might be interested in it.\n  if (typeof obj === \"object\") {\n    return mapObj(obj, function(key, value) {\n      var newKey = camelcase(key);\n      if (key !== newKey && newKey in obj) {\n        throw new Error(\"Camelcased key `\" + newKey + \"` would overwrite existing key of the given JSON object\");\n      }\n      return [newKey, camelcaseKeysDeep(value)];\n    });\n  }\n  // Something else like a String or Number.\n  return obj;\n}\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE/BE,MAAM,CAACC,OAAO,GAAG,SAASC,iBAAiB,CAACC,GAAG,EAAE;EAC/C;EACA,IAAI,CAACA,GAAG,EAAE;IACR,OAAOA,GAAG;EACZ;EACA;EACA,IAAIA,GAAG,YAAYC,IAAI,EAAE;IACvB,OAAOD,GAAG;EACZ;EACA;EACA,IAAIE,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;IACtB,OAAOA,GAAG,CAACI,GAAG,CAAC,UAASC,OAAO,EAAE;MAC/B,OAAON,iBAAiB,CAACM,OAAO,CAAC;IACnC,CAAC,CAAC;EACJ;EACA;EACA,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOJ,MAAM,CAACI,GAAG,EAAE,UAASM,GAAG,EAAEC,KAAK,EAAE;MACtC,IAAIC,MAAM,GAAGd,SAAS,CAACY,GAAG,CAAC;MAC3B,IAAIA,GAAG,KAAKE,MAAM,IAAIA,MAAM,IAAIR,GAAG,EAAE;QACnC,MAAM,IAAIS,KAAK,CAAC,kBAAkB,GAAGD,MAAM,GAAG,yDAAyD,CAAC;MAC1G;MACA,OAAO,CAACA,MAAM,EAAET,iBAAiB,CAACQ,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC;EACJ;EACA;EACA,OAAOP,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}